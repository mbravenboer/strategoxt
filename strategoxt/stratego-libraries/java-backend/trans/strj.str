/**
 * Stratego compiler for Java.
 *
 * @author Lennart Kats
 */
module strj

imports
  shared-constructors

  libstrc
  libstratego-lib
  libstratego-xtc
  libstratego-gpp
  libjava-front
    
  strj-options
  s2j
  lib/dr-scoping

strategies

  main-strj =
    strj-parse-options
  ; main-module-required
  ; log-timed(
      xtc-input(strj-or-die)
    | "Compilation succeeded", 1
    )
  ; <exit> 0
  
  strj-or-die =
  	strj
  <+
    prim("SSL_stacktrace_get_all_frame_names")
  ; if-verbose3(
      report-failure(
        log(|Error(), ["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
      ; <exit> 1
      )
    )
  ; log(|Error(), ["Compilation failed (", <run-time ; real-to-string(|2)>, " secs)"])
  ; <exit> 1
  
  strj =
    if FILE(get-extension => "ctree") then
      ?file
    ; xtc-ensure-file
    ; strc-get-infile
    ; read-from
    ; strc-output-ast
    <+
      <get-config> "-i"
    ; err(|"File does not exist")
    ; fail
    else
      dr-scope-all-verbose(
        with(<set-config> ("JAVA_PLATFORM", ()))
      ; strc-front-end
      )
    end
  ; try(mark-always-needed(|<get-config> "-m", 0, 0))
  ; if <get-config> "--single-strategy" + <get-config> "--boilerplate"
      then
        dr-scope-all-verbose(
          m-transform-no-overlays(id

        // desugar and check overlays
  
        ; m-transform-overlays(id
            ; pre-desugar
            ; check-overlay
            ; try(DeclareVarToConst)
          )
  
        ; m-transform-overlays(id
            ; m-variables-to-constructors-in-def
            ; pre-desugar
  // commented: Test whether all variables used in builds are matched before. But variables can be nullary constructors or overlays. Therefore needs global information
  //          ; not(def-use-def)
            ; not(check-where-with)
            ; raise-annotations
            ; GenerateCheckRule
            ; DeclareExpandOverlay
            ; where(Overlay-to-Congdef; m-add-def)
          )
          
          ; m-transform-local-defs(id
              ; map(expand-overlays-in-def)
              ; ![<joindefs>]
              ; [RenameSDef]
            )

          ; m-transform-external-defs(id
              ; if ?[_,_|_] then
                  warn(|"multiple external definitions with same signature")
                ; [id | ![]] // Cannot reuse dyn rule when already used in library
                end
              ; [ id
                ; RenameSDef
                ; desugar-DefaultVarDec
                ; strename
                ]
            )
          )
        )

        // We add a proxy definition with name *_0_0. This is used in other modules where this
        // strategy is used in strategy-argument-position, because we don't globally analyse when
        // we compile, but call *_0_0. *_0_0 will refer to the one version of the strategy that's
        // defined or the *_0_0 already exists. In the third case (no *_0_0, multiple other
        // definitions), the stratego editor should give an error during analysis, of the ambiguous
        // reference. 
        // Note that we can't call the definition something other than *_0_0 because for the
        // standard library we don't generate the proxy classes.
        // TODO: Change codegen: One class per strategy with method overloading for the different
        //  argument versions. This will get rid of the whole problem. You still need proxy *_?_?
        //  classes for backward compat though. Those can be empty subclasses. Only problem is it's
        //  incompatible with older pre-compiled libs that use the extend/override mechanism.
      ; let
          sarg_call = \VarDec(name, _) -> CallT(SVar(name), [], [])\
          targ_call = \VarDec(name, _) -> Var(name)\
          buildSDefT(|sargs, targs) = {suffix_length,length_to_take,name',body:
            \name -> SDefT(name', sargs, targs, body)
          with suffix_length := <strlen> $[_[<length> sargs]_[<length> targs]]
             ; length_to_take := <subti>(<string-length> name, suffix_length)
             ; name' := $[[<string-as-chars(take(|length_to_take))> name]_0_0]
             ; body := CallT(SVar(name), <map(sarg_call)> sargs, <map(targ_call)> targs)\}
        in
          oncetd(SDefT(string-ends-with(|"_0_0"), id, id, id))
          <+ oncetd({
            (  ?sdefts@[SDefT(name, sargs, targs, _)]
            <+ ?sdefts@[AnnoDef(_, SDefT(name, sargs, targs, _))])
          ; ![<buildSDefT(|sargs, targs)> name | sdefts]
          })
          <+ id // can't proxy, use of this strategy without args in sarg-position is ambiguous
        end
    end
  ; strc-optimize
  ; if not(<get-config> "--single-strategy")
      then strc-export-external-defs
         ; strc-output-frontend
      else 
        where(<get-config> "-i"
             ; (string-ends-with(|"boilerplate.ctree")
                < err(|"File should not be called with --single-strategy, call with --boilerplate instead"); fail
                + id))
    end
  ; s2j
  ; with(clean-output-dir)
  ; log-timed(list-loop(output-java) | "Pretty printing succeeded", 1)

  clean-output-dir =
    if <get-config> "--clean" then
      if <get-config> "-p" then
        output-dirname
      ; if file-exists then
          delete-java-files-in-dir
        end
      else
        warn-msg(|"Ignored --clean option: no package name specified")
      end
    end
  
  delete-java-files-in-dir =
    log-timed(
      with(olddir := <getcwd>)
    ; finally(
        chdir
      ; <readdir> "."
      ; list-loop(
          if has-extension(|"java") then
            remove-file
          end
        )
      , <chdir> olddir
      )
    | $[Deleted existing java files in output directory [<output-dirname>]], 1
    )
  <+
    warn(|"Could not clean output directory")

  output-java :
    ast -> name
    with
      name := <output-filename <+ fatal-err(|"Internal error: unexpected output")> ast
      // UNDONE. VladVergu. FastPretty printing only available in C, no more C backend.
    // ; if FastPrettyPrinting then
    //     if-c-platform(
    //       <parenthesize-Java5; pp-java-native> ast
    //     ; (rename-to(!name) <+ <fatal-err(|"Could not open output file")> name)
    //     )
    //   else
        ; log(|Info(), ["Writing file: ", name])
        ;  file := <fopen <+ fatal-err(|"Could not open output file")> (name, "w")
        ; box  := <pp-java5-to-abox> ast
        ; <box2text-stream(|80, file)> box
        ; <fclose> file
      // end
    <+
      output-java-error
       
   external pp-java-native(|)

   // TODO: Override .dep file location
   
   output-filename :
     CompilationUnit(
       _
     , _
     , [ClassDec(ClassDecHead(_, Id(x_name), _, _, _), _)]
     )
     -> x_name'
     with
       x_name' := <conc-strings> (<output-dirname>, "/", x_name, ".java")
   
   output-dirname =
     OutputDirName
   <+
     <get-config> "-o"
   ; if has-extension(|"java") + has-extension(|"ctree") then
       dirname
     end
   ; try(file-exists <+ mkdir <+ fatal-err(|"Output directory does not exist"))
   ; rules(OutputDirName := <id>)
   <+
     strc-getoutfile(!"")
   ; dirname
   ; try(file-exists <+ mkdir)
   ; rules(OutputDirName := <id>)

   // Using XTC for debugging:
   // using something like rtg-format-check(true, true|<java-rtg>) is more expensive atm,
   // because of the import-term involved)
   output-java-error =
      with(not(<pp-java5-to-abox> Id("foo") => Id("foo")) | "Internal error: linking against libjava-front failed")
    ; err-msg(|"Internal error: generated Java AST is malformed")
    ; write-to => FILE(file)
    ; try(<xtc-command(!"format-check")> ["--vis", "-i", file, "--rtg", <xtc-find> "Java-15.rtg" | <pass-verbose>])
    ; log(|Critical(), "Fatal errors encountered in generated code")
    ; <xtc-exit> 1
