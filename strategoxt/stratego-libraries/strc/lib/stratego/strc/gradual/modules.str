module modules

imports

stratego/strc/gradual/main
stratego/strc/gradual/signatures
stratego/strc/gradual/utils

stratego/strc/immutable/rel
stratego/strc/immutable/set

strategies

extract-constrs-inj:
  Specification(decl*) -> (constrMap, injMap)
  with
    opdecl* := <filter(?Signature(<filter(?Constructors(<id>) + ?Overlays(<id>));concat>));concat> decl*
  ; (constr*, inj*) := <partition(extract-constr, extract-inj)> opdecl*
  ; constrMap := <imrel-from-list> constr*
  ; injMap := <imrel-from-list> inj*

extract-aliases: (constrs, injs) -> aliases
  with
    invInjs := <imrel-invert> injs
  ; <imrel-filter(\(k,v) -> <id> where <imrel-get(|v);imset-to-list;?[k]> invInjs\)> injs
    // injections where target has only the one rule
  ; imrel-filter(\(_, v) -> <Swap> where <imrel-filter(?(_, ConstrType(_, v)));equal(|<imrel-new>)> constrs\)
    // where both have no constructors, and they're now flipped
  ; imrel-transitive-closure
    => aliases

lub-map: injection-closure -> <imrel-to-map(\(x,x) -> x\)> relation
  with
    forward := <imrel-map(\(l,u) -> ((l,u),u)\)> injection-closure
  ; relation := <imrel-union(|<imrel-map((Swap, id))> forward)> forward

extract-strategy-types(|internals, externals):
  Specification(decl*) -> stratEnv
  with
    sdeft* := <filter(?Strategies(<id>) + ?Rules(<id>));concat> decl*
  ; stratEnv := <risky(getDefTypes(|internals, externals)|"getDefTypes failed")> sdeft*
